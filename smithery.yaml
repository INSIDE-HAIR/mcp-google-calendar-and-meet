runtime: typescript

configSchema:
  type: object
  anyOf:
    - required: [CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN]
    - required: [googleOAuthCredentials]
    - required: [googleMeetCredentialsPath, googleMeetTokenPath]
  properties:
    CLIENT_ID:
      type: string
      title: "Google OAuth2 Client ID (Recommended)"
      description: "Google OAuth2 Client ID for direct token authentication. More reliable than file-based auth."
      pattern: "^[0-9]+-[a-zA-Z0-9]+\\.apps\\.googleusercontent\\.com$"
      examples: [
        "123456789-abcdefghijklmnop.apps.googleusercontent.com"
      ]
    CLIENT_SECRET:
      type: string
      title: "Google OAuth2 Client Secret"
      description: "Google OAuth2 Client Secret that corresponds to your Client ID."
      pattern: "^GOCSPX-[a-zA-Z0-9_-]+$"
      examples: [
        "GOCSPX-abcdefghijklmnopqrstuvwxyz"
      ]
    REFRESH_TOKEN:
      type: string
        title: "Google OAuth2 Refresh Token"
        description: "Long-lived refresh token for automatic authentication. Obtain this through OAuth flow."
        pattern: "^1//[a-zA-Z0-9_-]+$"
        examples: [
          "1//0ABCD-EFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        ]
      googleOAuthCredentials:
        type: string
        title: "Google OAuth Credentials (Recommended)"
        description: "Absolute path to your Google OAuth 2.0 credentials JSON file. Token will be automatically saved alongside. Use forward slashes even on Windows."
        examples: [
          "/Users/username/Documents/MCP-Credentials/google-meet-credentials.json",
          "C:/Users/username/Documents/MCP-Credentials/google-meet-credentials.json",
          "/home/username/.config/mcp/google-meet-credentials.json"
        ]
        pattern: "^(/|[A-Za-z]:/|\\\\).+\.json$"
      googleMeetCredentialsPath:
        type: string
        default: "credentials.json"
        title: "Credentials Path (Advanced)"
        description: "Path to Google OAuth 2.0 credentials file for advanced configuration."
      googleMeetTokenPath:
        type: string
        default: "token.json"
        title: "Token Path (Advanced)"
        description: "Path to store/read the authentication token for advanced configuration."
      enableDebugLogging:
        type: boolean
        default: false
        title: "Enable Debug Logging"
        description: "Enable detailed debug logging for troubleshooting (not recommended for production)"
      customLogLevel:
        type: string
        enum: ["error", "warn", "info", "debug"]
        default: "info"
        title: "Log Level"
        description: "Set the logging verbosity level"
  commandFunction: |
    (config) => {
      const env = {
        NODE_ENV: 'production',
        LOG_LEVEL: config.customLogLevel || 'info'
      };
      
      // Method 1: Direct token authentication (recommended)
      if (config.CLIENT_ID && config.CLIENT_SECRET && config.REFRESH_TOKEN) {
        env.CLIENT_ID = config.CLIENT_ID;
        env.CLIENT_SECRET = config.CLIENT_SECRET;
        env.REFRESH_TOKEN = config.REFRESH_TOKEN;
      }
      // Method 2: File-based OAuth credentials
      else if (config.googleOAuthCredentials) {
        env.G_OAUTH_CREDENTIALS = config.googleOAuthCredentials;
      } 
      // Method 3: Advanced configuration
      else {
        env.GOOGLE_MEET_CREDENTIALS_PATH = config.googleMeetCredentialsPath;
        env.GOOGLE_MEET_TOKEN_PATH = config.googleMeetTokenPath;
      }
      
      if (config.enableDebugLogging) {
        env.LOG_LEVEL = 'debug';
      }
      
      return {
        command: 'npx',
        args: ['tsx', 'src/index.ts'],
        env: env
      };
    }
  exampleConfig:
    # Method 1: Direct token authentication (recommended for production)
    CLIENT_ID: "123456789-abcdefghijklmnop.apps.googleusercontent.com"
    CLIENT_SECRET: "GOCSPX-abcdefghijklmnopqrstuvwxyz"
    REFRESH_TOKEN: "1//0ABCD-EFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    customLogLevel: "info"
    enableDebugLogging: false

    # Method 2: File-based OAuth credentials (legacy support)
    # googleOAuthCredentials: "/Users/username/Documents/MCP-Credentials/google-meet-credentials.json"
    
    # Windows example:
    # googleOAuthCredentials: "C:/Users/username/Documents/MCP-Credentials/google-meet-credentials.json"
    
    # Linux example:
    # googleOAuthCredentials: "/home/username/.config/mcp/google-meet-credentials.json"

    # Method 3: Advanced configuration (for custom token management)
    # googleMeetCredentialsPath: "credentials.json"
    # googleMeetTokenPath: "token.json"
    # customLogLevel: "warn"

# Smithery registry metadata
name: google-meet-mcp-server
displayName: "Google Meet MCP Server v3.0"
description: "Production-ready containerized MCP server with Docker support, TypeScript, Zod validation, and enterprise security features. Provides 23 production-ready tools for Google Calendar API v3 and Google Meet API v2 with comprehensive meeting management, recording, transcription, and space configuration capabilities. Now supports both direct token authentication and file-based OAuth for maximum compatibility."
version: 3.0.0
author: INSIDE-HAIR
maintainer: INSIDE-HAIR
repository: https://github.com/INSIDE-HAIR/google-meet-mcp-server
homepage: https://github.com/INSIDE-HAIR/google-meet-mcp-server
license: ISC
category: productivity

keywords:
  - google-meet
  - google-calendar
  - meeting-management
  - video-conferencing
  - recording
  - transcription
  - mcp
  - model-context-protocol
  - google-workspace
  - enterprise
  - api-v2
  - oauth2
  - typescript
  - zod-validation
  - error-handling
  - claude-desktop

# Complete tool inventory (23 production-ready tools)
tools:
  # Google Calendar API v3 Tools (11 tools)
  - name: calendar_v3_list_calendars
    description: "List all accessible calendars with metadata and permissions"
    category: calendar
  - name: calendar_v3_list_events
    description: "List calendar events with optional Google Meet links and guest permissions"
    category: calendar
  - name: calendar_v3_get_event
    description: "Get detailed event information including guest permissions and Meet conference data"
    category: calendar
  - name: calendar_v3_create_event
    description: "Create calendar events with Google Meet conferences and configurable guest permissions"
    category: calendar
  - name: calendar_v3_update_event
    description: "Update calendar events including guest permissions and Meet settings"
    category: calendar
  - name: calendar_v3_delete_event
    description: "Delete calendar events and associated Meet conferences"
    category: calendar
  - name: calendar_v3_freebusy_query
    description: "Query free/busy information for scheduling across multiple calendars"
    category: calendar
  - name: calendar_v3_quick_add
    description: "Quick add events using natural language parsing"
    category: calendar

  # Google Meet API v2 Tools - Space Management (4 tools)
  - name: meet_v2_create_space
    description: "Create Google Meet spaces with advanced configuration (access types, moderation, artifacts)"
    category: meet-spaces
  - name: meet_v2_get_space
    description: "Get comprehensive details of Google Meet spaces including configuration and active conferences"
    category: meet-spaces
  - name: meet_v2_update_space
    description: "Update Google Meet space configuration including moderation and access settings"
    category: meet-spaces
  - name: meet_v2_end_active_conference
    description: "End active conferences in Google Meet spaces programmatically"
    category: meet-spaces

  # Google Meet API v2 Tools - Conference Records (2 tools)
  - name: meet_v2_list_conference_records
    description: "List historical conference records with filtering and pagination"
    category: conference-records
  - name: meet_v2_get_conference_record
    description: "Get detailed information about specific conference records"
    category: conference-records

  # Google Meet API v2 Tools - Recordings (2 tools)
  - name: meet_v2_list_recordings
    description: "List conference recordings with Drive export information"
    category: recordings
  - name: meet_v2_get_recording
    description: "Get detailed recording information including download links and metadata"
    category: recordings

  # Google Meet API v2 Tools - Transcripts (2 tools)
  - name: meet_v2_list_transcripts
    description: "List conference transcripts with Google Docs export information"
    category: transcripts
  - name: meet_v2_get_transcript
    description: "Get detailed transcript information including document links"
    category: transcripts
  - name: meet_v2_list_transcript_entries
    description: "List individual speech segments from transcripts with speaker identification"
    category: transcripts

  # Google Meet API v2 Tools - Participants (2 tools)
  - name: meet_v2_get_participant
    description: "Get participant details from conference records"
    category: participants
  - name: meet_v2_list_participants
    description: "List all participants from a conference record"
    category: participants
  - name: meet_v2_list_participant_sessions
    description: "List participant sessions with join/leave timestamps"
    category: participants

# Tool categories for better organization
toolCategories:
  calendar:
    name: "Google Calendar Management"
    description: "Create, update, and manage calendar events with Google Meet integration"
    count: 11
  meet-spaces:
    name: "Google Meet Spaces"
    description: "Create and manage Google Meet spaces with advanced configuration"
    count: 4
  conference-records:
    name: "Conference Records"
    description: "Access historical conference data and analytics"
    count: 2
  recordings:
    name: "Meeting Recordings"
    description: "Manage and access meeting recordings with Drive integration"
    count: 2
  transcripts:
    name: "Meeting Transcripts"
    description: "Access meeting transcripts and speech-to-text data"
    count: 3
  participants:
    name: "Participant Management"
    description: "Track and manage meeting participants"
    count: 3

# System requirements and capabilities
requirements:
  runtime: node
  nodeVersion: ">=18.0.0"
  dependencies:
    - "@modelcontextprotocol/sdk"
    - "googleapis"
    - "open"
    - "zod"
    - "tsx"
    - "typescript"
  apis:
    - name: "Google Calendar API v3"
      required: true
      scopes: ["https://www.googleapis.com/auth/calendar"]
    - name: "Google Meet API v2"
      required: true
      scopes:
        - "https://www.googleapis.com/auth/meetings.space.created"
        - "https://www.googleapis.com/auth/meetings.space.readonly"
        - "https://www.googleapis.com/auth/meetings.space.settings"

  prerequisites:
    - "Google Cloud Project with Calendar API and Meet API enabled"
    - "OAuth 2.0 Desktop Application credentials"
    - "Google Workspace account (Business Standard+ for advanced features)"

# Enhanced features and capabilities v3.0
features:
  - "23 production-ready tools with TypeScript and Zod validation"
  - "Direct token authentication (CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN)"
  - "Backward compatibility with file-based OAuth credentials"
  - "Advanced error handling with Claude Desktop-friendly messages"
  - "Input validation with business logic and intelligent defaults"
  - "Comprehensive Google Calendar management with guest permissions"
  - "Advanced Google Meet space configuration (access types, moderation)"
  - "Recording and transcription artifact management"
  - "Conference record and participant tracking"
  - "Enterprise-grade security and authentication"
  - "Automatic token refresh and persistence"
  - "Full TypeScript support with type safety and IntelliSense"
  - "Docker containerization with multi-stage production builds"
  - "Health checks and monitoring support"
  - "Cross-platform deployment (Windows, macOS, Linux)"
  - "Team-friendly configuration with security best practices"
  - "Comprehensive documentation and user guides"
  - "Smithery-optimized deployment and configuration"

# Support and documentation
support:
  documentation: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/README.md"
  issues: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/issues"
  setup: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/SMITHERY_USER_GUIDE.md"
  security: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/SECURITY.md"
  docker: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/DOCKER_DEPLOYMENT.md"
  troubleshooting: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/TROUBLESHOOTING.md"

# Enterprise and team features
teamFeatures:
  multiUser: true
  roleBasedAccess: false  # Users manage their own credentials
  auditLogging: true      # Via Google Cloud Console
  secretsManagement: true # Via secure credential storage
  
# Deployment configurations
deploymentOptions:
  smithery:
    supported: true
    recommended: true
    setupGuide: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/SMITHERY_USER_GUIDE.md"
  docker:
    supported: true
    development: true
    production: true
    setupGuide: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/DOCKER_DEPLOYMENT.md"
  manual:
    supported: true
    setupGuide: "https://github.com/INSIDE-HAIR/google-meet-mcp-server/blob/main/docs/SETUP.md"

# Health and monitoring
healthCheck:
  endpoint: "/health"
  timeout: 10
  retries: 3
  enabled: true

# Security configuration
security:
  credentialStorage: "user-managed"
  tokenPersistence: "local-file"
  authMethod: "oauth2"
  encryptionAtRest: false
  networkIsolation: true
  auditLogging: "google-cloud-console"
