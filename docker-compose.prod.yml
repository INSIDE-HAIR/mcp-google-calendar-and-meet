# Google Meet MCP Server v3.0 - Production Configuration
# Docker Compose for production deployment with optimizations and monitoring
version: '3.8'

services:
  # ======================================================================
  # Main MCP Server - Production Mode
  # ======================================================================
  google-meet-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Use production stage from multi-stage Dockerfile
    container_name: google-meet-mcp-prod
    restart: unless-stopped
    
    # Production environment variables
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      
      # Method 1: Direct token authentication (recommended for production)
      # Set these via Docker secrets or environment files:
      # - CLIENT_ID=${CLIENT_ID}
      # - CLIENT_SECRET=${CLIENT_SECRET}
      # - REFRESH_TOKEN=${REFRESH_TOKEN}
      
      # Method 2: File-based OAuth credentials (legacy)
      - G_OAUTH_CREDENTIALS=/app/credentials.json
      - GOOGLE_MEET_CREDENTIALS_PATH=/app/credentials.json
      - GOOGLE_MEET_TOKEN_PATH=/app/token.json
      
      # Production optimizations
      - NODE_OPTIONS=--enable-source-maps --max-old-space-size=256
    
    # Production volume mounts (read-only where possible)
    volumes:
      # Credentials (read-only for security)
      - ./credentials.json:/app/credentials.json:ro
      - ./token.json:/app/token.json:rw
      # Persistent data and logs
      - logs_prod:/app/logs
      - data_prod:/app/data
    
    # Network configuration
    ports:
      - "3000:3000"  # HTTP transport
      - "9090:9090"  # Metrics endpoint (if implemented)
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "node", "scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
      # Production deployment settings
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 120s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true if no writes needed outside volumes
    
    # Dependencies
    depends_on:
      mongodb:
        condition: service_healthy

  # ======================================================================
  # MongoDB for Production (Optional - for Next.js integration)
  # ======================================================================
  mongodb:
    image: mongo:7-jammy
    container_name: google-meet-mongodb-prod
    restart: unless-stopped
    
    # MongoDB production configuration
    environment:
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongodb_username
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_password
      - MONGO_INITDB_DATABASE=google_meet_mcp
    
    # Production data persistence
    volumes:
      - mongodb_data_prod:/data/db
      - mongodb_config_prod:/data/configdb
      - ./mongodb.conf:/etc/mongo/mongod.conf:ro
    
    # Network configuration (no external port exposure for security)
    # ports: []  # Internal access only
    
    # MongoDB health check
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    
    # Docker secrets for credentials
    secrets:
      - mongodb_username
      - mongodb_password

  # ======================================================================
  # Reverse Proxy (Nginx) - Optional
  # ======================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: google-meet-nginx-prod
    restart: unless-stopped
    
    # Nginx configuration
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    
    # Network configuration
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    
    # Dependencies
    depends_on:
      google-meet-mcp:
        condition: service_healthy
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Only run if proxy profile is enabled
    profiles:
      - proxy

  # ======================================================================
  # Monitoring Stack (Optional)
  # ======================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: google-meet-prometheus-prod
    restart: unless-stopped
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    ports:
      - "9092:9090"  # Prometheus web UI
    
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: google-meet-grafana-prod
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    
    ports:
      - "3001:3000"  # Grafana web UI
    
    depends_on:
      - prometheus
    
    secrets:
      - grafana_password
    
    profiles:
      - monitoring

# ========================================================================
# Production Secrets Management
# ========================================================================
secrets:
  mongodb_username:
    file: ./secrets/mongodb_username.txt
  mongodb_password:
    file: ./secrets/mongodb_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# ========================================================================
# Named Volumes for Production Data Persistence
# ========================================================================
volumes:
  # Application data
  logs_prod:
    driver: local
    name: google_meet_mcp_logs_prod
  data_prod:
    driver: local
    name: google_meet_mcp_data_prod
  
  # MongoDB data
  mongodb_data_prod:
    driver: local
    name: google_meet_mongodb_data_prod
  mongodb_config_prod:
    driver: local
    name: google_meet_mongodb_config_prod
  
  # Monitoring data
  prometheus_data:
    driver: local
    name: google_meet_prometheus_data
  grafana_data:
    driver: local
    name: google_meet_grafana_data

# ========================================================================
# Production Network Configuration
# ========================================================================
networks:
  default:
    name: google_meet_mcp_prod
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16